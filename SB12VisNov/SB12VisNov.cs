using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*
 * a video of the first level of the game being de-made in this program can be seen here
 * https://www.youtube.com/watch?v=Pwb4M6ZEVWQ
 * 
 * This is a Visual Novel Engine.
 * It was inspired by the Phoenix Wright Ace Attorney Game series
 * and it's influences can been seen throughout.
 * The program boils down to a story telling system that utilizes ascii art and text boxes.
 * It also has the ablility to ask the player questions or have the player make choices that will
 * impact the story later on. Building a new game is as "simple" as rewriting the Episode 1.pwaa file.
 * Below is a comment describing the syntax for each file.
 * 
*/

namespace SB12VisNov
{
    class SB12VisNov
    {
        /*
         Here we grab the files containing the dialogue (Dialogue.visnov) and the artwork (Art.ascii).
         * Notes on the files:
         * Dialogue.visnov
         *  -Each "page" of dialogue is seperated by a line break.
         *  -Each line has a form of {NAME}|{LINE1}|{LINE2}|{LINE3}|{ARTCODE}
         *  -NAME is where you would place the name of who is talking. usually in brackets. "[Phoenix]" for example.
         *  -If it's ment to be a nondialogue type box, just put an equals sign in it. You could put nothing in it at all
         *   but I don't like that.
         *  -Lines 1, 2, and three is where you put the dialogue.
         *  -Lastly, the ARTCODE tells the program on what line in the Art.ascii file it should pull the art from.
         *  -There are special commands to activate game features. QUESTIONs and CHOICEs are currently implemented.
         *  questions have a set format:
            QUESTION --this is the question identifier. It tells the program that the folowing is an interactive question.
            {CORRECT#}|{INCORRECTa#}|{INCORRECTb#} --The first slot is the number for the correct answer i.e:1,2 or 3.
         * --the second slot is the first incorrect choice. example:if the correct answer is 3 then it would look like this:
         * -- 3|1|2 
            1.{ANSWER}|2.{ANSWER}|3.{ANSWER}|{ARTCODE} --this is where you write the choices the player will see.
            {QUESTION}? --here you can restate the question for the player to referr to.
            {CS}|{CF}|{IaS}|{IaF}|{IbS}|{IbF} --these are the line numbers for where the reaction sequences start and finish.
         * --the first two tell where the "correct" dialogue is
         * --the second two tells where "incorrect A"dialogue is
         * --the third is similar.
            true --this is the safe identifier. If set to true, answereing a question incorrectly will not result in HP loss.
            Correct|Dialogue|1||{ARTCODE}
            ...
            Correct|Dialogue|X||{ARTCODE}
            IncorrectA|Dialogue|1||{ARTCODE}
            ...
            IncorrectA|Dialogue|X||{ARTCODE}
            IncorrectB|Dialogue|1||{ARTCODE}
            ...
            IncorrectB|Dialogue|X||{ARTCODE}
         * CHOICEs have an identical setup, with the difference being if a question is answered wrong, you will be forced
         * to try again. CHOICEs will only let you make a decision once. 
         * Art.ascii
         *  -Each piece of art is 80 characters by 38 characters.
         *  -art is surrounded by a box made of "=" and "|".
         *  -each line of art is seperated by a line break.
         *  -the bottom line of most the art has command on it that the player can type to do stuff.
         *  -Artwork was generated by taking an image and running it through an Image to ASCII
         *   converter "Courtesy of http://www.glassgiant.com/ascii/"
         *  -Best results are on a black background.
         */
        //These lines of code must be modified before it can be run on a different PC.
        //direct to the Episode1 folder
		public const string CurrDir = Environment.CurrentDirectory;
        public const string DIALOGUE = "\\PLAY\\Dialogue.visnov";
        public const string ASCIIART = "\\PLAY\\Art.ascii";
        public static string[] dialogue = File.ReadAllLines(CurrDir + DIALOGUE);//get all dialogue lines
        public static string[] asciiart = File.ReadAllLines(CurrDir + ASCIIART);//get all ascii art
        static void Main(string[] args)
        {

            //String constants for user input
            const string QUST = "QUESTION";//question identifier
            const string CHOI = "CHOICE";//choice identifier
            const string TREE = "CHOICETREE";//Choice Tree Identifier
            const string SAVE = "S";//Save/Load
            const string QUIT = "Q";//quit game
            const string RAND = "RANDOM";
            int health = 5;//health
            int c = 0;
            string[] choice = new string[3];//an array of three choices. there can only be three story altering choices to save.

            TextBox(dialogue[0]);//safe to assume that the first line of dialogue is, in fact dialogue. Its mandatory.
            string input = Console.ReadLine();
            Console.Clear();
            health = Convert.ToInt16(savegame[1]);
            choice = savegame[2].Split('|');
            for (int x = Convert.ToInt16(savegame[0]); x < dialogue.Length; x++)
            {
                input = input.ToUpper();
                if (health <= 0)
                {
                    TextBox("==|GAME OVER||Game will now reset.|875");
                    Console.ReadLine();
                    Console.Clear();
                    x = 0;
                    health = 5;
                    c = 0;
                    choice[0] = " ";
                    choice[1] = " ";
                    choice[2] = " ";    
                }
                switch (input)
                {
                    case QUIT://check for quitters
                        Environment.Exit(0);
                        break;
                    case SAVE://check for saving
                        FileStream final = new FileStream(SAVING, FileMode.Create, FileAccess.Write);//Create overwrites existing file.
                        StreamWriter end = new StreamWriter(final);
                        end.WriteLine(x);
                        end.WriteLine(health);
                        end.WriteLine(choice[0]+"|"+choice[1]+"|"+choice[2]);
                        end.Close();//close writer and stream
                        final.Close();//to finalize everything
                        x = x - 1;
                        break;
                }
                switch (dialogue[x])
                {
                    case QUST://if the dialouge calls for a question
                        string[] derp = Question(x, health).Split('|');//run question
                        x = Convert.ToInt32(derp[0]);//get line number
                        health = Convert.ToInt32(derp[1]);//get current health
                        //if health<=0 GAMEOVER script
                        break;
                    case CHOI://if dialogue calls for chioce
                        if(c != 0)//don't increase c the first time.
                            c++;//increase c everytime a new choice is made.
                        derp = Choice(x, health).Split('|');//run choice
                        x = Convert.ToInt32(derp[0]);//get line number
                        choice[c] = derp[1];//get selected choice
                        break;
                    case TREE:
                        x = ChoiceTree(choice[c], x);
                        break;
                    case RAND://generates a random number for a random choice
                        Random crazy = new Random();
                        if (c != 0)//don't increase c the first time.
                            c++;//increase c everytime a new choice is made.
                        choice[c] = Convert.ToString(crazy.Next(0,3));
                        break;
                    default://all other times display textbox
                        TextBox(dialogue[x]);
                        input = Console.ReadLine();
                        Console.Clear();
                        break;
                }
             }
        }
        public static void TextBox(string dialogue)
        {
            const int LINE = 80;//line length. Console window holds 80 char/line
            string[] line = dialogue.Split('|');//dialogue must be split with "|" in the Episode file
            int ascii = Convert.ToInt32(line[line.Length - 1]);//the last line of each string of dialogue is the ascii art code
            for (int i = ascii; i < (ascii+38); i++)
                Console.Write(asciiart[i]);//ascii art is 80 char by 38 chars. ascii is the starting point of each picture. Using Write instead of WriteLine allows for the pictures to be seen properly
            //Top Line
            Console.Write("|={0}", line[0]);//write the characters name w/ decorations
            int derp = LINE - (3 + line[0].Length);//2 characters used above, plus the '|' to be added at the end, PLUS length of name, minus line length.
            for (int x = 0; x < derp; x++)
                Console.Write("=");//print the rest of the line
            Console.Write("|");//cap off the line (


            //1st Line
            Console.Write("|{0}", line[1]);
            derp = LINE - (line[1].Length + 2);//LINE, minus 2'|'s, minus line[1].length = numbedr of empty spaces
            for (int x = 0; x < derp; x++)
                Console.Write(" ");//print spaces
            Console.Write("|");//cap off line

            //2nd Line
            Console.Write("|{0}", line[2]);//second verse same as the first
            derp = LINE - (line[2].Length + 2);
            for (int x = 0; x < derp; x++)
                Console.Write(" ");
            Console.Write("|");

            //3rd Line
            Console.Write("|{0}", line[3]);
            derp = LINE - (line[3].Length + 2);
            for (int x = 0; x < derp; x++)
                Console.Write(" ");
            Console.Write(">");//Continue Arrow at the bottom right

            //Bottom line
            derp = LINE - 2;
            Console.Write("|");
            for (int x = 0; x < derp; x++)
                Console.Write("=");
            Console.Write("|");
        }
        public static void TextBox(string question, string ans,int health)//the textbox operation for printing questions
        {
            const int LINE = 80;//line length. Console window holds 80 char/line
            string[] line = ans.Split('|');//dialogue must be split with "|" in the Episode file
            int ascii = Convert.ToInt32(line[line.Length - 1]);//the last line of each string of dialogue is the ascii art code
            for (int i = ascii; i < (ascii + 38); i++)
                Console.Write(asciiart[i]);//ascii art is 80 char by 38 chars. ascii is the starting point of each picture. Using Write instead of WriteLine allows for the pictures to be seen properly
            Console.WriteLine();
            //Top Line
            Console.Write("|{0}", question);//write the question w/ decorations
            int derp = LINE - (2 + question.Length);//2 characters used above, plus the '|' to be added at the end, PLUS length of name, minus line length.
            if (derp > 0)//questions may potentially be longer than 80 characters. hopefully this won't happen frequently. or at all.
            {
                for (int x = 0; x < derp; x++)
                    Console.Write("=");//print the rest of the line
                Console.Write("|");//cap off the line
            }
            else
            {
                Console.WriteLine();
            }

                //1st Line
                Console.Write("|{0}", line[0]);
                derp = LINE - (line[0].Length + 2);//LINE, minus 2'|'s, minus line[1].length = numbedr of empty spaces
                for (int x = 0; x < derp; x++)
                    Console.Write(" ");//print spaces
                Console.Write("|");//cap off line

                //2nd Line
                Console.Write("|{0}", line[1]);//second verse same as the first
                derp = LINE - (line[1].Length + 2);
                for (int x = 0; x < derp; x++)
                    Console.Write(" ");
                Console.Write("|");

                //3rd Line
                Console.Write("|{0}", line[2]);
                derp = LINE - (line[2].Length + 2);
                for (int x = 0; x < derp; x++)
                    Console.Write(" ");
                Console.Write(">");//Continue Arrow in bottom left

                //Bottom line
                derp = LINE - 10;
                Console.Write("|Health:");//include player health in question box.
                Console.Write(health);
                for (int x = 0; x < derp; x++)
                    Console.Write("=");
                Console.Write("|");
            }
        public static int ChoiceTree(string choice,int x)
        {
            bool loop = true;
            x = x + 1;
            while (loop == true)
            {
                string[] routeSS = dialogue[x].Split('|');
                int[] route = new int[routeSS.Length];//this array contains the dialogue trees for each answer
                for (int i = 0; i < routeSS.Length; i++)
                    route[i] = Convert.ToInt32(routeSS[i]);//convert to numbers
                if (choice == "0")//if player selected chioce 0
                {
                    for (int i = route[0] - 1; i < route[1]; i++)//choices are linear, you only get one chance at them...
                    {
                        TextBox(dialogue[i]);
                        Console.ReadLine();
                        Console.Clear();
                        loop = false;
                    }
                }
                else
                {
                    if (choice == "1")//if player selected choice 1
                    {
                        for (int i = route[2] - 1; i < route[3]; i++)//choices are linear, you only get one chance at them...
                        {
                            TextBox(dialogue[i]);
                            Console.ReadLine();
                            Console.Clear();
                            loop = false;
                        }
                    }
                    else
                    {
                        if (choice == "2")//if player seletced choice 2
                        {
                            for (int i = route[4] - 1; i < route[5]; i++)//choices are linear, you only get one chance at them...
                            {
                                TextBox(dialogue[i]);
                                Console.ReadLine();
                                Console.Clear();
                                loop = false;
                            }
                        }
                    }//no need to code for bianary choices. if choice was binary, code will never reach second else.
                }
                x = route[route.Length - 1] - 1;
            }
            return x;
        }
        public static string Choice(int x,int health)//choice is a modified copy of Question(), which requires health to be input. I'm lazy and didn't change it.
        {
                Console.Clear();    
                int choice = 3; //keeps track of the players choice
                bool fail = true;//loop control
                int lineNum = x - 1;//save previous line (question was on here)
                x = x + 1;//increase x
                string[] qNumS = dialogue[x].Split('|');//get answer numbers. 1,2,&3 or 1&2. no need to conver to int (see below)
                x = x + 1;
                string ans = dialogue[x];//get the actual options that the player will see.
                x = x + 1;
                string question = dialogue[x];//get the question
                x = x + 1;
                string[] routeSS = dialogue[x].Split('|');
                int[] route = new int[routeSS.Length];//this array contains the dialogue trees for each answer
                for (int i = 0; i < routeSS.Length; i++)
                    route[i] = Convert.ToInt32(routeSS[i]);//convert to numbers
                x = x + 1;
                string safeS = dialogue[x];
                bool safe = Convert.ToBoolean(safeS);//control wether HP is lost upon wrong answers
                if (qNumS.Length == 3)//for questions with three options
                {
                    while (fail == true)
                    {
                        TextBox(question, ans, health);//all choices follow this pattern
                        string input = Console.ReadLine();
                        Console.Clear();
                        if (input == qNumS[0])
                        {
                            for (int i = route[0] - 1; i < route[1]; i++)//choices are linear, you only get one chance at them...
                            {
                                TextBox(dialogue[i]);
                                Console.ReadLine();
                                Console.Clear();
                            }
                            fail = false;//..as such, nomatter what you choose, the process will terminate after. 
                            x = route[route.Length - 1] - 1;//get updated line number
                            choice = 0;//remember choice
                        }
                        else
                        {
                            if (input == qNumS[1])//same as above
                            {
                                for (int i = route[2] - 1; i < route[3]; i++)
                                {
                                    TextBox(dialogue[i]);
                                    Console.ReadLine();
                                    Console.Clear();
                                }
                                fail = false;
                                x = route[route.Length - 1] - 1;
                                choice = 1;
                            }
                            else
                            {
                                if (input == qNumS[2])//same as above
                                {
                                    for (int i = route[4] - 1; i < route[5]; i++)
                                    {
                                        TextBox(dialogue[i]);
                                        Console.ReadLine();
                                        Console.Clear();
                                    }
                                    fail = false;
                                    x = route[route.Length - 1] - 1;
                                    choice = 2;
                                }
                                else
                                {
                                }
                            }
                        }
                    }//end while
                }//End if
                else//this is the same code as above but modified for only 2 options instead of three.
                {
                    while (fail == true)
                    {
                        TextBox(question, ans, health);//all choices follow this pattern
                        string input = Console.ReadLine();
                        Console.Clear();
                        if (input == qNumS[0])
                        {
                            for (int i = route[0] - 1; i < route[1]; i++)//choices are linear, you only get one chance at them...
                            {
                                TextBox(dialogue[i]);
                                Console.ReadLine();
                                Console.Clear();
                            }
                            fail = false;//..as such, nomatter what you choose, the process will terminate after. 
                            x = route[route.Length - 1] - 1;//get updated line number
                            choice = 0;//remember choice
                        }
                        else
                        {
                            if (input == qNumS[1])//same as above
                            {
                                for (int i = route[2] - 1; i < route[3]; i++)
                                {
                                    TextBox(dialogue[i]);
                                    Console.ReadLine();
                                    Console.Clear();
                                }
                                fail = false;
                                x = route[route.Length - 1] - 1;
                                choice = 1;
                            }
                            else
                            {
                            }
                        }
                    }//end while
                }//End if
            string derp = (x + "|" + choice);//return line number and player choice
            return derp;
        }//End CHOI
        public static string Question(int x,int health)//questions, these loop.
        {
                Console.Clear();
                bool fail = true;//loop control
                int lineNum = x - 1;//save previous line (question was on here)
                x = x + 1;
                string[] qNumS = dialogue[x].Split('|');//get number of questions and the correct answer. correct answer is the first number. followed by one or two incorrect answers. see notes at beginning
                x = x + 1;
                string ans = dialogue[x];//get Options to be shown to player.
                x = x + 1;
                string question = dialogue[x];//get rephrased question.
                x = x + 1;
                string[] routeSS = dialogue[x].Split('|');
                int[] route = new int[routeSS.Length];//get dialogue trees for each option.
                for (int i = 0; i < routeSS.Length; i++)
                    route[i] = Convert.ToInt32(routeSS[i]);
                x = x + 1;
                string safeS = dialogue[x];//get bool determining if wrong answers cause hp loss
                bool safe = Convert.ToBoolean(safeS);
                Console.Clear();
                if (qNumS.Length == 3)//questions can only have two or three options. this is the code for three optins.
                {
                    while (fail == true)
                    {
                        if (health <= 0)
                        {
                            fail = false;
                            break;
                        }
                        TextBox(question, ans, health);
                        string input = Console.ReadLine();
                        Console.Clear();
                            if (input == qNumS[0])//qNumS[0] always has the number for the correct answer, be it 1,2 or 3.
                            {
                                for (int i = route[0] - 1; i < route[1]; i++)//play correct answer route
                                {
                                    TextBox(dialogue[i]);
                                    Console.ReadLine();
                                    Console.Clear();
                                }
                                fail = false;//when correct answer is chosen, exit question
                                x = route[route.Length - 1] - 1;//get updated route
                            }
                            else
                            {
                                if (input == qNumS[1])//wrong answer 1
                                {
                                    for (int i = route[2] - 1; i < route[3]; i++)//play wrong answer1 route
                                    {
                                        TextBox(dialogue[i]);
                                        Console.ReadLine();
                                        Console.Clear();
                                    }
                                    if (safe == false)//if hp loss=true, lose hp
                                        health = health - 1;
                                }
                                else
                                {
                                    if (input == qNumS[2])//wrong answer 2
                                    {
                                        for (int i = route[4] - 1; i < route[5]; i++)
                                        {
                                            TextBox(dialogue[i]);//play wrong answer 2 route
                                            Console.ReadLine();
                                            Console.Clear();
                                        }
                                        if (safe == false)//if hploss = true, lose hp
                                            health = health - 1;
                                    }
                                    else
                                    {
                                    }
                                }
                            
                        }
                    }//End while
                }//end if
                else//this is the code for only two options.
                {
                    while (fail == true)
                    {
                        if (health <= 0)
                        {
                            fail = false;
                            break;
                        }
                        TextBox(dialogue[lineNum]);
                        TextBox(question, ans, health);
                        string input = Console.ReadLine();
                        Console.Clear();
                            if (input == qNumS[0])//correct answer
                            {
                                for (int i = route[0] - 1; i < route[1]; i++)//play correct answer route
                                {
                                    TextBox(dialogue[i]);
                                    Console.ReadLine();
                                    Console.Clear();
                                }
                                fail = false;//break loop
                                x = route[route.Length - 1] - 1;//update line number
                            }
                            else
                            {
                                if (input == qNumS[1])//wrong answer 1
                                {
                                    for (int i = route[2] - 1; i < route[3]; i++)//play wrong answer 1 route
                                    {
                                        TextBox(dialogue[i]);
                                        Console.ReadLine();
                                        Console.Clear();
                                    }
                                    if (safe == false)//if hploss = true, lose hp
                                        health = health - 1;
                                }
                                else
                                {
                                }
                            
                        }
                    }//end while
                }//end else
            string derp = (x + "|" + health);//return line number and health
            return derp;
        }//End QUST
    }
    /* Project STARTED as a demake of the game Phoenix wright ace attorney.
	In the game, you'd use pieces of evidence to solve a crime.
	had this feature been implemented, i would have had an inventory system and
	and inventory array full of Evidence objects. I didn't do this. But here's the code anyway.
    class Evidence//evidence objects
    {
        public string name;//name of evidence
        public string descr;//description of evidence
        public int ID;//id number of evidence to be used in code
        public string type;//type of evidence
        public string obtained;//where you got the evidence
        public Evidence()//Empty Constructor
        {
            name = "[name]";
            descr = "line|line|line|0";
            ID = 0;
            type = "void";
            obtained = "Nothingness";
        }
        public Evidence(string nName, string nType, string nObtained, string nDescr, int nID)//Full Constructor
        {
            name = nName;
            descr = nDescr;
            ID = nID;
            type = nType;
            obtained = nObtained;
        }
        public void upName(string nName)//name changer
        {
            name = nName;
        }
        public void upDescr(string nDescr)//description updater
        {
            descr = nDescr;
        }
        public void upID(int nID)//ID updater
        {
            ID = nID;
        }
        public void upType(string nType)//type updater
        {
            type = nType;
        }
        public void upObtained(string nObtained)//obtained updater
        {
            obtained = nObtained;
        }
    }
     */
}


